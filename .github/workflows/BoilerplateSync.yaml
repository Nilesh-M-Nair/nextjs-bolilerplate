name: "Sync Changes to Child Repo"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  configurations:
    runs-on: ubuntu-latest
    outputs:
      boilerplate_repo_name: ${{ steps.set_variables.outputs.boilerplate_repo_name }}
      child_apps_list: ${{ steps.set_variables.outputs.child_apps_list }}
    steps:
      - name: Load Variables from GitHub
        id: set_variables
        run: |
          # Load variables from the environment
          echo "boilerplate_repo_name=${{ vars.BOILERPLATE_REPO_NAME }}" >> $GITHUB_OUTPUT
          echo "child_apps_list=${{ vars.CHILD_APPS_LIST }}" >> $GITHUB_OUTPUT

      - name: Debug Loaded Variables
        run: |
          echo "Boilerplate Repo Name: ${{ vars.BOILERPLATE_REPO_NAME }}"
          echo "Child Apps List: ${{ vars.CHILD_APPS_LIST }}"
  

  update-child-apps:
    runs-on: ubuntu-latest
    needs: configurations
    strategy:
      matrix: ${{ fromJson(needs.configurations.outputs.child_apps_list || '[]') }}    
    steps:
      - name: Debug Matrix Data
        run: |
          echo "Repo Name: ${{ matrix.repoName }}"
          echo "Repo Link: ${{ matrix.repoLink }}"

      # Set Git author identity
      - name: Set Git author identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone Boilerplate Repo (Parent Repo)
        run: |
          git clone --branch main https://${{ secrets.GH_PAT }}@github.com/Nilesh-M-Nair/marketplace-boilerplate-rnd.git ../boilerplate

      - name: Clone Child Repo ${{ matrix.appName }}
        run: |
          git clone https://${{ secrets.GH_PAT }}@${{ matrix.repoLink }} ../${{ matrix.repoName }}

      - name: Apply Parent Repo Changes
        run: |
          rsync -av --exclude='.git' --exclude='.github' --exclude='.vscode'  ../boilerplate/ ../${{ matrix.repoName }}

      - name: Reapply Custom Overrides from boilerplate-override
        run: |
          if [ -d ../${{ matrix.repoName }}/boilerplate-override ]; then
              rsync -av --exclude='.git' --exclude='.github' --exclude='.vscode' ../${{ matrix.repoName }}/boilerplate-override/ ../${{ matrix.repoName }}
          else
              echo "No boilerplate-override directory found for ${{ matrix.repoName }}."
          fi

      - name: Ensure Branch Exists and Commit Changes
        working-directory: ../${{ matrix.repoName }}
        run: |
          # Stash both tracked and untracked changes
          git stash push --include-untracked || true

          # Check if the branch exists remotely
          if git ls-remote --exit-code origin feature/updates-from-boilerplate; then
            git fetch origin feature/updates-from-boilerplate
            git checkout feature/updates-from-boilerplate
            git stash pop || true # Apply stashed changes back
          else
            git checkout -b feature/updates-from-boilerplate
          fi

          # Add changes, commit, and push
          git add .
          git commit -m "Sync changes from boilerplate" || echo "No changes to commit."
          git pull --rebase origin feature/updates-from-boilerplate || true
          git push --set-upstream origin feature/updates-from-boilerplate

      - name: Create or Update PR from Feature Branch to Development
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const pr = await github.rest.pulls.create({
              owner: 'Nilesh-M-Nair',
              repo: '${{ matrix.repoName }}',
              title: 'Automated PR for boilerplate updates',
              head: 'feature/updates-from-boilerplate',
              base: 'development',
              body: 'This PR merges boilerplate updates into development.',
            });
            console.log(`Created PR: ${pr.data.html_url}`);

      - name: Merge PR Feature Branch to Development
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const pr = await github.rest.pulls.list({
                owner: 'Nilesh-M-Nair',
                repo: '${{ matrix.repoName }}',
                head: 'Nilesh-M-Nair:feature/updates-from-boilerplate',
                base: 'development',
            });
            if (pr.data.length > 0) {
              await github.rest.pulls.merge({
                owner: 'Nilesh-M-Nair',
                repo: '${{ matrix.repoName }}',
                pull_number: pr.data[0].number,
                merge_method: 'squash',
              });
              console.log('PR merged successfully.');
            } else {
              console.log('No PR to merge.');
            }

      - name: Create or Update PR from Development Branch to Staging
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const pr = await github.rest.pulls.create({
                owner: 'Nilesh-M-Nair',
                repo: '${{ matrix.repoName }}',
                title: 'Automated PR from development to staging for boilerplate updates',
                head: 'development',
                base: 'staging',
                body: 'This PR merges develpoment updates into staging.',
            });
            console.log(`Created PR: ${pr.data.html_url}`);

      - name: Merge PR Development Branch to Staging
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const pr = await github.rest.pulls.list({
                owner: 'Nilesh-M-Nair',
                repo: '${{ matrix.repoName }}',
                head: 'Nilesh-M-Nair:development',
                base: 'staging',
            });
            if (pr.data.length > 0) {
                await github.rest.pulls.merge({
                owner: 'Nilesh-M-Nair',
                repo: '${{ matrix.repoName }}',
                pull_number: pr.data[0].number,
                merge_method: 'squash',
                });
                console.log('PR merged successfully.');
            } else {
                console.log('No PR to merge.');
            }

      - name: Create or Update PR from Staging Branch to Main
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const pr = await github.rest.pulls.create({
                owner: 'Nilesh-M-Nair',
                repo: '${{ matrix.repoName }}',
                title: 'Automated PR from staging to main for boilerplate updates',
                head: 'staging',
                base: 'main',
                body: 'This PR merges staging updates into main.',
            });
            console.log(`Created PR: ${pr.data.html_url}`);

  trigger-display-commands:
      runs-on: ubuntu-latest
      needs: update-child-apps
      steps:
        - name: Trigger Display Workflow
          uses: actions/github-script@v6
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type: 'display_cicd_commands',
                client_payload: {
                  commands: '${{ needs.configurations.outputs.ChildAppsCiCdCommands }}'
                }
              });