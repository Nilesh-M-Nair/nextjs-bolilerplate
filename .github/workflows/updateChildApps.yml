name: 'Update Child Apps'
on:
  push:
    branches: main

jobs:
  configurations:
    runs-on: ubuntu-latest
    outputs:
      ChildAppsList: ${{ steps.getConfigs.outputs.ChildAppsList }}
      GithubUserId: ${{ steps.getConfigs.outputs.GithubUserId }}
      GithubUserEmailId: "nilesh.m.nair@gmail.com"
      GithubUserName: "Nilesh-M-Nair"
      BoilerplateRepoName: "nextjs-bolilerplate"
    steps:
      - uses: actions/github-script@v6
        id: getConfigs
        with:
          script: |
            const githubUserIdForCommits = 'nilesh-m-nair';
            const appListMatrix = {
              include: [{
                appName: 'nextjs-app-1',
                repoName: 'nextjs-app-1',
                repoLink: 'github.com/Nilesh-M-Nair/nextjs-app-1'
              }]
            };
            core.setOutput('ChildAppsList', JSON.stringify(appListMatrix));
            core.setOutput('GithubUserId', githubUserIdForCommits);

  UpdatingChildApps:
    runs-on: ubuntu-latest
    needs: configurations
    strategy:
      matrix: ${{ fromJson(needs.configurations.outputs.ChildAppsList) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all branches and history

      - name: Clone the child repository
        run: |
          cd ..
          git clone https://${{ secrets.GH_PAT }}@${{ matrix.repoLink }}  # Cloning child repo, like nextjs-app-1
          cd ./${{ matrix.repoName }}/  # Switch into the child repository's directory
          git config user.email "${{ needs.configurations.outputs.GithubUserEmailId }}"
          git config user.name "${{ needs.configurations.outputs.GithubUserName }}"

      - name: Create and switch to branches in the child repo
        run: |
          git fetch --all

          # Check out or create staging branch in the child repo
          if git show-ref --quiet refs/remotes/origin/staging; then
            git checkout staging
          else
            git checkout -b staging origin/main
            git push origin staging
          fi

          # Check out or create development branch in the child repo
          if git show-ref --quiet refs/remotes/origin/development; then
            git checkout development
          else
            git checkout -b development origin/main
            git push origin development
          fi

          # Check out or create feature branch in the child repo
          if git show-ref --quiet refs/remotes/origin/feature/updates-from-boilerplate; then
            git checkout feature/updates-from-boilerplate
          else
            git checkout -b feature/updates-from-boilerplate origin/main
            git push origin feature/updates-from-boilerplate
          fi

      - name: Apply boilerplate changes to the child repo
        run: |
          rsync -av --exclude='.git' ../${{ needs.configurations.outputs.BoilerplateRepoName }}/ .  # Sync changes from boilerplate to child repo
          if [ -d "boilerplate-overrides" ]; then
            rsync -av boilerplate-overrides/ .
          else
            echo "boilerplate-overrides directory not found, skipping copy."
          fi


      - name: Commit and push changes to the child repo
        run: |
          git add .
          git commit -m "Updates taken from boilerplate" || echo "No changes to commit."
          git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/Nilesh-M-Nair/${{ matrix.repoName }}.git
          git push origin feature/updates-from-boilerplate

      - name: Create and merge PRs for the child repo
        run: |
          gh pr create -B development -t UpdatesFromBoilerPlate -b UpdatesFromBoilerPlate || echo "PR to development already exists."
          gh pr merge --admin --squash || echo "Failed to merge PR to development."
          git checkout development
          gh pr create -B staging -t UpdatesFromBoilerPlate -b UpdatesFromBoilerPlate || echo "PR to staging already exists."
          gh pr merge --admin --squash || echo "Failed to merge PR to staging."
          git checkout staging
          gh pr create -B main -t UpdatesFromBoilerPlate -b UpdatesFromBoilerPlate || echo "PR to main already exists."
          cd ..
          rm -rf ${{ matrix.repoName }}  # Clean up the cloned child repo

    env:
      GH_TOKEN: ${{ secrets.GH_PAT }}
