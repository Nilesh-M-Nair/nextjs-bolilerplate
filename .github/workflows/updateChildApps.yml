name: 'Update Child Apps'
on:
  push:
    branches: main
jobs:
  configurations:
    runs-on: ubuntu-latest
    outputs:
      ChildAppsList: ${{ steps.getConfigs.outputs.ChildAppsList }}
      ChildAppsCiCdCommands: ${{ steps.getConfigs.outputs.ChildAppsCiCdCommands }}
      GithubUserId: ${{ steps.getConfigs.outputs.GithubUserId }}
      #The User id used above should be the user of which the personal access token is created and used below in next job (updateChildApps job)
      GithubUserEmailId: "nilesh.nair@afourtech.com"
      #The above email id will be used when committing the updates to the child apps
      GithubUserName: "NileshNairA4"
      #The above name will be used when committing the updates to the child apps
      BoilerplateRepoName: "nextjs-bolilerplate"
    steps:
      - uses: actions/github-script@v6
        id: getConfigs
        with:
          script: |
            const githubUserIdForCommits = 'nileshnaira4';
            const appListMatrix = {
              include: [{
                appName: 'nextjs-app-1',
                repoName: 'nextjs-app-1',
                repoLink: 'github.com/Nilesh-M-Nair/nextjs-app-1'
              }]
            };
            core.setOutput('ChildAppsList', appListMatrix);
            core.setOutput('ChildAppsCiCdCommands', appListMatrix.include.reduce(function(allCommands, app){
              return allCommands = allCommands;
            }, ""));
            core.setOutput('GithubUserId', githubUserIdForCommits);
          result-encoding: string

  UpdatingChildApps:
    runs-on: ubuntu-latest
    needs: configurations
    strategy:
      matrix: ${{fromJson(needs.configurations.outputs.ChildAppsList)}}
    steps:
      - uses: actions/checkout@v3
      - name: Updating ${{matrix.appName}}
        run: |
          cd ..
          git clone https://${{ secrets.GH_PAT }}@${{ matrix.repoLink }}
          cd ./${{ matrix.repoName }}/
          git config user.email "${{ needs.configurations.outputs.GithubUserEmailId }}"
          git config user.name "${{ needs.configurations.outputs.GithubUserName }}"

      - name: Create and switch to branches
        run: |
          for branch in staging development feature/updates-from-boilerplate; do
            if git rev-parse --verify origin/$branch; then
              git checkout $branch
            else
              git checkout -b $branch
            fi
          done

      - name: Apply boilerplate changes
        run: |
          cp -rf ../${{ needs.configurations.outputs.BoilerplateRepoName }}/* .
          if [ -d "boilerplate-overrides" ]; then
            cp -rf ./boilerplate-overrides/* .
          else
            echo "boilerplate-overrides directory not found, skipping copy."
          fi

      - name: Commit and push changes
        run: |
          git add .
          git diff --quiet || git commit -m "Updates taken from boilerplate"
          git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/Nilesh-M-Nair/${{ matrix.repoName }}.git
          git push origin feature/updates-from-boilerplate

      - name: Create and merge PRs
        run: |
          for target in development staging main; do
            gh pr create -B $target -t UpdatesFromBoilerPlate -b UpdatesFromBoilerPlate || echo "PR to $target already exists."
            gh pr merge -m || true
            git checkout $target
          done
          cd ..
          rm -rf ${{ matrix.repoName }}
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}