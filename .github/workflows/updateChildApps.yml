name: 'Update Child Apps'
on:
  push:
    branches: main
jobs:
  configurations:
    runs-on: ubuntu-latest
    outputs:
      ChildAppsList: ${{ steps.getConfigs.outputs.ChildAppsList }}
      ChildAppsCiCdCommands: ${{ steps.getConfigs.outputs.ChildAppsCiCdCommands }}
      GithubUserId: ${{ steps.getConfigs.outputs.GithubUserId }}
      GithubUserEmailId: ${{ steps.getConfigs.outputs.GithubUserEmailId }}
      GithubUserName: ${{ steps.getConfigs.outputs.GithubUserName }}
      BoilerplateRepoName: ${{ steps.getConfigs.outputs.BoilerplateRepoName }}
    steps:
      - uses: actions/github-script@v6
        id: getConfigs
        with:
          script: |
            const githubUserIdForCommits = 'nileshnaira4';
            const appListMatrix = {
              include: [{
                appName: 'nextjs-app-1',
                repoName: 'nextjs-app-1',
                repoLink: 'github.com/Nilesh-M-Nair/nextjs-app-1'
              }]
            };
            core.setOutput('ChildAppsList', appListMatrix);
            core.setOutput('ChildAppsCiCdCommands', appListMatrix.include.reduce(function(allCommands, app) {
              return allCommands; // This logic needs to be defined based on your command requirements
            }, ""));
            core.setOutput('GithubUserId', githubUserIdForCommits);
            core.setOutput('GithubUserEmailId', 'nilesh.nair@afourtech.com');
            core.setOutput('GithubUserName', 'NileshNairA4');
            core.setOutput('BoilerplateRepoName', 'nextjs-bolilerplate');
          result-encoding: string

  UpdatingChildApps:
    runs-on: ubuntu-latest
    needs: configurations
    strategy:
      matrix: ${{ fromJson(needs.configurations.outputs.ChildAppsList) }}
    steps:
      - uses: actions/checkout@v3

      - name: Clone the repository
        run: |
          cd ..
          git clone https://${{ needs.configurations.outputs.GithubUserId }}:${{ secrets.GH_PAT }}@${{ matrix.repoLink }}
          cd ./${{ matrix.repoName }}/
          git config user.email "${{ needs.configurations.outputs.GithubUserEmailId }}"
          git config user.name "${{ needs.configurations.outputs.GithubUserName }}"

      - name: Create and switch to branches
        run: |
          for branch in staging development feature/updates-from-boilerplate; do
            if git rev-parse --verify origin/$branch; then
              git checkout $branch
            else
              git checkout -b $branch
            fi
          done

      # Uncomment and define the boilerplate changes application as needed
      # - name: Apply boilerplate changes
      #   run: |
      #     cp -rf ../${{ needs.configurations.outputs.BoilerplateRepoName }}/* .
      #     if [ -d "boilerplate-overrides" ]; then
      #       cp -rf ./boilerplate-overrides/* .
      #     else
      #       echo "boilerplate-overrides directory not found, skipping copy."
      #     fi

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Updates taken from boilerplate" || echo "No changes to commit."
          git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/Nilesh-M-Nair/${{ matrix.repoName }}.git
          git push origin feature/updates-from-boilerplate

      - name: Create and merge PRs
        run: |
          gh pr create -B development -t UpdatesFromBoilerPlate -b UpdatesFromBoilerPlate || echo "PR to development already exists."
          gh pr merge -m || echo "Failed to merge PR to development."
          git checkout development
          gh pr create -B staging -t UpdatesFromBoilerPlate -b UpdatesFromBoilerPlate || echo "PR to staging already exists."
          gh pr merge -m || echo "Failed to merge PR to staging."
          git checkout staging
          gh pr create -B main -t UpdatesFromBoilerPlate -b UpdatesFromBoilerPlate || echo "PR to main already exists."
          cd ..
          rm -rf ${{ matrix.repoName }}
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
