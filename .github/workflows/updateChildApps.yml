name: 'Update Child Apps'
on:
  push:
    branches: main  # Trigger when parent repo's main branch is pushed

jobs:
  configurations:
    runs-on: ubuntu-latest
    outputs:
      ChildAppsList: ${{ steps.getConfigs.outputs.ChildAppsList }}
      GithubUserId: ${{ steps.getConfigs.outputs.GithubUserId }}
      GithubUserEmailId: "nilesh.m.nair@gmail.com"
      GithubUserName: "Nilesh-M-Nair"
      BoilerplateRepoName: "nextjs-bolilerplate"
    steps:
      - uses: actions/github-script@v6
        id: getConfigs
        with:
          script: |
            const githubUserIdForCommits = 'nilesh-m-nair';
            const appListMatrix = {
              include: [{
                appName: 'nextjs-app-1',
                repoName: 'nextjs-app-1',
                repoLink: 'Nilesh-M-Nair/nextjs-app-1'  # Removed .git from the repo link
              }]
            };
            core.setOutput('ChildAppsList', JSON.stringify(appListMatrix));
            core.setOutput('GithubUserId', githubUserIdForCommits);
          result-encoding: string

  UpdatingChildApps:
    runs-on: ubuntu-latest
    needs: configurations
    strategy:
      matrix: ${{ fromJson(needs.configurations.outputs.ChildAppsList) }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Pass the GitHub token for CLI authentication
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all branches and history

      - name: Clone the child repository ${{ matrix.appName }}
        run: |
          cd ..
          git clone https://${{ secrets.GH_PAT }}@github.com/${{ matrix.repoLink }}.git
          cd ./${{ matrix.repoName }}/
          git config user.email "${{ needs.configurations.outputs.GithubUserEmailId }}"
          git config user.name "${{ needs.configurations.outputs.GithubUserName }}"

      - name: Set Git author identity
        run: |
          git config --local user.email "${{ needs.configurations.outputs.GithubUserEmailId }}"
          git config --local user.name "${{ needs.configurations.outputs.GithubUserName }}"

      - name: Create and switch to feature branch in the child repo
        run: |
          git fetch --all
          # Check or create feature branch
          if git show-ref --quiet refs/remotes/origin/feature/updates-from-boilerplate; then
            git switch feature/updates-from-boilerplate
          else
            git switch -c feature/updates-from-boilerplate origin/main
            git push --set-upstream origin feature/updates-from-boilerplate  # Set upstream for the new branch
          fi

      - name: Apply boilerplate changes to the child repo
        run: |
          rsync -av --exclude='.git' ../${{ needs.configurations.outputs.BoilerplateRepoName }}/ .
          if [ -d "boilerplate-overrides" ]; then
            rsync -av boilerplate-overrides/ .
          else
            echo "boilerplate-overrides directory not found, skipping copy."
          fi

      - name: Commit and push changes to the feature branch
        run: |
          git add .
          git commit -m "Updates taken from boilerplate" || echo "No changes to commit."
          git push origin feature/updates-from-boilerplate

      - name: Create PR from feature to development
        id: pr_feature_to_dev
        run: |
          # Create the PR and capture the URL
          pr_url=$(gh pr create -B development -H feature/updates-from-boilerplate -t "Merge feature into development" -b "Auto PR to merge feature into development" --repo "${{ matrix.repoLink }}" | tee)
          echo "Pull request URL: $pr_url"
          # Extract the PR number from the URL
          pr_number=$(echo "$pr_url" | sed -n 's#.*/pull/\([0-9]*\).*#\1#p')
          echo "Extracted PR number: $pr_number"
          if [ -z "$pr_number" ]; then
            echo "Error: PR number could not be extracted. Exiting."
            exit 1
          fi
          echo "::set-output name=PR_NUMBER::$pr_number"

      - name: Debugging - Show PR number
        run: |
          echo "Captured PR number: ${{ steps.pr_feature_to_dev.outputs.PR_NUMBER }}"

      - name: Merge PR from feature to development
        run: |
          # Use the captured PR number to merge
          if [ -z "${{ steps.pr_feature_to_dev.outputs.PR_NUMBER }}" ]; then
            echo "Error: PR number is missing. Exiting."
            exit 1
          fi
          gh pr merge ${{ steps.pr_feature_to_dev.outputs.PR_NUMBER }} --squash --auto --repo "${{ matrix.repoLink }}" || { echo "Failed to merge PR to development for ${{ matrix.repoName }}"; exit 1; }

      - name: Create PR from development to staging
        id: pr_dev_to_stage
        run: |
          # Create the PR and capture the URL
          pr_url=$(gh pr create -B staging -H development -t "Merge development into staging" -b "Auto PR to merge development into staging" --repo "${{ matrix.repoLink }}" | tee)
          echo "Pull request URL: $pr_url"
          # Extract the PR number from the URL
          pr_number=$(echo "$pr_url" | sed -n 's#.*/pull/\([0-9]*\).*#\1#p')
          echo "Extracted PR number: $pr_number"
          if [ -z "$pr_number" ]; then
            echo "Error: PR number could not be extracted. Exiting."
            exit 1
          fi
          echo "::set-output name=PR_NUMBER::$pr_number"

      - name: Merge PR from development to staging
        run: |
          # Use the captured PR number to merge
          if [ -z "${{ steps.pr_dev_to_stage.outputs.PR_NUMBER }}" ]; then
            echo "Error: PR number is missing. Exiting."
            exit 1
          fi
          gh pr merge ${{ steps.pr_dev_to_stage.outputs.PR_NUMBER }} --squash --auto --repo "${{ matrix.repoLink }}" || { echo "Failed to merge PR to staging for ${{ matrix.repoName }}"; exit 1; }

      - name: Deploy from staging branch
        run: |
          echo "Deploying from staging branch"
